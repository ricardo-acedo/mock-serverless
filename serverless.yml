service: mock-serverless

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local
  - serverless-s3-local

custom:
  tableNameUsers: 'mock-users'
  tableNameTemplates: 'mock-templates'
  templatesPathIndex: 'pathIndex'
  s3BucketName: 'mock-server-templates'
  s3:
    port: 8001
    directory: /tmp
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true
    stages:
      - dev

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["TemplatesDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - { "Fn::GetAtt": ["TemplatesS3Bucket", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.tableNameUsers}
    TEMPLATES_TABLE: ${self:custom.tableNameTemplates}
    TEMPLATES_PATH_INDEX: ${self:custom.templatesPathIndex}
    S3_BUCKET: ${self:custom.s3BucketName}

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNameUsers}
    TemplatesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: path
            AttributeType: S
          - AttributeName: httpStatus
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.templatesPathIndex}
            KeySchema:
              - AttributeName: path
                KeyType: HASH
              - AttributeName: httpStatus
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNameTemplates}
    TemplatesS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
